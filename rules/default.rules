import org.openhab.model.script.actions.Timer
import org.openhab.core.library.types.*
import java.lang.Math.*
  
var Number LastActiveScene = 1
var Timer timer = null

rule Startup
when 
    System started
then
	if (Scene_General.state == Uninitialized) {
		Scene_General.postUpdate(0)
	} 
end

rule "set gpio to pwm on startup"
when 
	System started
then
	executeCommandLine("gpio mode 1 pwm")
	
	if (Light_2DDiffusor_Links.state == Undefined)	{
		postUpdate(Light_2DDiffusor_Links, 0)
	}
end

rule Scene_Management_Kino
when
	Item Scene_General changed
then
	if(Scene_General.state == 0){
		//aus ist das ziel
		Light_2DDiffusor_Links.sendCommand(0)
	}
	else if (Scene_General.state != Undefined){
		LastActiveScene = Scene_General.state as DecimalType
		logInfo("abc", "LastActiveScene is now "+LastActiveScene.toString())
		
		if(Scene_General.state == 1){
			//Film
			Light_2DDiffusor_Links.sendCommand(34)
		} else if(Scene_General.state == 2){
			//Arbeiten
			Light_2DDiffusor_Links.sendCommand(100)
		}
		
	}
end

rule "Fabis Phone Shake"
when
	Item fabse_phone_shake received command 
then
	if(Scene_General.state == 0){
		Scene_General.postUpdate(LastActiveScene)
	}
	else{
		Scene_General.postUpdate(0)
	}
end

rule "2D Diffusor dimmen"
when
	Item Light_2DDiffusor_Links received command 
then
	if(timer!=null) timer.cancel()
	
	var done = false
	var Number targetPercent
	if (receivedCommand==ON){
		targetPercent = 100
	}
	else if (receivedCommand==OFF){
		targetPercent = 0
	}
	else if(receivedCommand instanceof PercentType){
		targetPercent = (receivedCommand as PercentType).byteValue
	}
		
	var Number currentPercent = 0
	if(Light_2DDiffusor_Links.state instanceof DecimalType){
		currentPercent = Light_2DDiffusor_Links.state as DecimalType
	} 
	
	//annÃ¤hern oder fertig
	var Number nextPercent
	if(currentPercent > targetPercent) {
		nextPercent = currentPercent - 1
	}
	else if(currentPercent < targetPercent) {
		nextPercent = currentPercent + 1
	}
	else if(currentPercent == targetPercent) {
		done = true
	}
	
//	logInfo("abc", "Done is "+done.toString())
	if(!done){ 	
		
		var Number nextAbsolute
		if(nextPercent == 0){
			//0 => 0
			nextAbsolute = 0
		}else{		
			//exponential! 2^(x/10)
			nextAbsolute = Math::pow(2, (nextPercent/10).doubleValue).intValue
		}
		
	
		postUpdate(Light_2DDiffusor_Links, nextPercent)		
		Light_2DDiffusor_Links_hw.sendCommand(nextAbsolute)
		
		val targetPercentFinal = targetPercent
		timer = createTimer(now.plusMillis(50)) [| sendCommand(Light_2DDiffusor_Links, targetPercentFinal) ]
	}
end